generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  recipe recipe[]
}

model dish {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  recipe recipe[]
}

model favourite_recipes {
  user_category_id Int    @default(autoincrement())
  recipe_id        Int
  recipe           recipe @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_recipe_recipe1")
  user             user   @relation(fields: [user_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_recipe_user1")

  @@id([user_category_id, recipe_id])
  @@index([recipe_id], map: "fk_user_has_recipe_recipe1_idx")
  @@index([user_category_id], map: "fk_user_has_recipe_user1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model recipe {
  id                Int                 @id @default(autoincrement())
  category_id       Int
  dish_id           Int
  author_id         Int?
  name              String              @db.VarChar(50)
  description       String?             @db.VarChar(511)
  cook_time         DateTime            @db.Time(0)
  servings          Int
  image_id          String?             @db.VarChar(36)
  favourite_recipes favourite_recipes[]
  category          category            @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_category1")
  dish              dish                @relation(fields: [dish_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_dish1")
  user              user?               @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_user1")
  recipe_rating     recipe_rating[]
  recipe_review     recipe_review[]
  recipe_step       recipe_step[]

  @@index([category_id], map: "fk_recipe_category1_idx")
  @@index([dish_id], map: "fk_recipe_dish1_idx")
  @@index([author_id], map: "fk_recipe_user1_idx")
}

model recipe_rating {
  recipe_id Int    @default(autoincrement())
  user_id   Int
  rating    Int
  recipe    recipe @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_has_user_recipe1")
  user      user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_has_user_user1")

  @@id([recipe_id, user_id])
  @@index([recipe_id], map: "fk_recipe_has_user_recipe1_idx")
  @@index([user_id], map: "fk_recipe_has_user_user1_idx")
}

model recipe_review {
  user_id   Int      @default(autoincrement())
  recipe_id Int
  date      DateTime @db.DateTime(0)
  comment   String   @db.VarChar(255)
  recipe    recipe   @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_recipe_recipe2")
  user      user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_recipe_user2")

  @@id([user_id, recipe_id, date])
  @@index([recipe_id], map: "fk_user_has_recipe_recipe2_idx")
  @@index([user_id], map: "fk_user_has_recipe_user2_idx")
}

model recipe_step {
  id          Int    @id @default(autoincrement())
  recipe_id   Int
  description String @db.VarChar(255)
  number      Int
  recipe      recipe @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_step_recipe1")

  @@index([recipe_id], map: "fk_recipe_step_recipe1_idx")
}

model registration {
  id          Int      @id @default(autoincrement())
  username    String   @unique(map: "username_UNIQUE") @db.VarChar(16)
  email       String   @unique(map: "email_UNIQUE") @db.VarChar(255)
  password    String   @db.VarChar(255)
  create_time DateTime @default(now()) @db.DateTime(0)
  name        String   @db.VarChar(255)
  surname     String   @db.VarChar(255)
  birthdate   DateTime @db.Date
  token       String   @db.VarChar(36)
}

model user {
  id                Int                 @id @default(autoincrement())
  username          String              @unique(map: "username_UNIQUE") @db.VarChar(45)
  email             String              @unique(map: "email_UNIQUE") @db.VarChar(255)
  password          String              @db.VarChar(255)
  name              String              @db.VarChar(255)
  surname           String              @db.VarChar(255)
  birthdate         DateTime            @db.Date
  activate_time     DateTime            @default(now()) @db.DateTime(0)
  favourite_recipes favourite_recipes[]
  recipe            recipe[]
  recipe_rating     recipe_rating[]
  recipe_review     recipe_review[]
  role              Role                @default(USER)
}

enum Role {
  USER
  ADMIN
}
